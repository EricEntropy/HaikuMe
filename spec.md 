Specifications for the Rails Assessment
Specs:

 x Using Ruby on Rails for the project
 x Include at least one has_many relationship (x has_many y; e.g. User has_many Recipes)
 user has many haiku
 x Include at least one belongs_to relationship (x belongs_to y; e.g. Post belongs_to User)
 haiku belongs to user 
 x Include at least two has_many through relationships (x has_many y through z; e.g. Recipe has_many Items through Ingredients)
 haiku has many themes through haiku_theme
 x Include at least one many-to-many relationship (x has_many y through z, y has_many x through z; e.g. Recipe has_many Items through Ingredients, Item has_many Recipes through Ingredients)
theme has many users, users has many themes
 The "through" part of the has_many through includes at least one user submittable attribute, that is to say, some attribute other than its foreign keys that can be submitted by the app's user (attribute_name e.g. ingredients.quantity)
 x Include reasonable validations for simple model objects (list of model objects with validations e.g. User, Recipe, Ingredient, Item)
 validations on all models
 x Include a class level ActiveRecord scope method (model object & class method name and URL to see the working feature e.g. User.most_recipes URL: /users/most_recipes)
 haiku.content class method
 x Include signup (how e.g. Devise)
 signup included 
 x Include login (how e.g. Devise)
  login included 
 x Include logout (how e.g. Devise)
  logout included 
 x Include third party signup/login (how e.g. Devise/OmniAuth)
 omniauth included 
 x Include nested resource show or index (URL e.g. users/2/recipes)
 users have nested haikus
 x Include nested resource "new" form (URL e.g. recipes/1/ingredients/new)
 user can make new haiku
 x Include form dislay of validation errors (form URL e.g. /recipes/new)
 forms have validation and flash errors
Confirm:

 x The application is pretty DRY
 x Limited logic in controllers
 x Views use helper methods if appropriate
 x Views use partials if appropriate